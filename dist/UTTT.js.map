{"version":3,"sources":["../src/UTTT.js"],"names":["UTTT","size","init","maxMoves","Math","pow","moves","nextBoard","winner","board","stateBoard","x","y","isFinished","player","move","Error","gameFinished","isValidBoard","Array","isArray","length","rows","small","prettyPrint","split","row","xCoord","ret","push","join","sepChars","i","sep","substr"],"mappings":"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","file":"UTTT.js","sourcesContent":["import TicTacToe from './model/TicTacToe';\nimport errors from './errors';\n\n/**\n * Ultimate Tic Tac Game\n */\nexport default class UTTT {\n  constructor(size = 3){\n    this.size = size;\n    this.init();\n\n    this.maxMoves = Math.pow(this.size, 4);\n\n    return this;\n  }\n\n  /**\n   * Initialize the game\n   */\n  init(){\n    // Game state\n    this.moves = 0;\n    this.nextBoard = null;\n    this.winner = -1;\n    this.board = [];\n\n    // The state board holds the ultimate game state\n    this.stateBoard = new TicTacToe(this.size);\n\n    for(let x = 0; x < this.size; x++){\n      this.board[x] = [];\n      for(let y = 0; y < this.size; y++){\n        this.board[x][y] = new TicTacToe(this.size);\n      }\n    }\n  }\n\n  /**\n   * Returns true if the game is over\n   */\n  isFinished(){\n    return (this.stateBoard.isFinished() || this.moves === this.maxMoves);\n  }\n\n  /**\n   * Execute a move\n   * @param player Player identifier (1 || 2)\n   * @param board Board coordinates as an array [x, y]\n   * @param move Move coordinates as an array [x, y]\n   */\n  move(board, player, move){\n    if(this.isFinished()) {\n      throw new Error(errors.gameFinished, 1);\n    }\n\n    if(!this.isValidBoard(board)){\n      throw new Error(errors.board, 6);\n    }\n\n    this.board[board[0]][board[1]].move(player, move);\n    this.moves++;\n\n    this.nextBoard = move;\n\n    // Update the game board state\n    if(this.board[board[0]][board[1]].isFinished()){\n      this.stateBoard.move(\n        this.board[board[0]][board[1]].winner,\n        board\n      );\n    }\n\n    this.winner = this.stateBoard.winner;\n  }\n\n  /**\n   * Validates a board\n   * @param board Board coordinates as an array [x, y]\n   * @returns {boolean}\n   */\n  isValidBoard(board){\n    if(!this.nextBoard){\n      return !(\n        !Array.isArray(board) ||\n        board.length !== 2 ||\n        board[0] < 0 ||\n        board[0] > this.size ||\n        board[1] < 0 ||\n        board[1] > this.size ||\n        typeof(this.board[board[0]][board[1]]) === 'undefined'\n      );\n    }else{\n      return this.nextBoard[0] === board[0] &&\n             this.nextBoard[1] === board[1];\n    }\n  }\n\n  prettyPrint(){\n    let rows = [];\n    for(let x = 0; x < this.size; x++) {\n      for (let y = 0; y < this.size; y++) {\n        const small = this.board[x][y].prettyPrint().split(\"\\n\");\n\n        for(let row = 0; row < this.size; row++){\n          const xCoord = x * this.size + row;\n          if(!rows[xCoord]){\n            rows[xCoord] = [];\n          }\n          rows[xCoord][y] = small[row];\n        }\n      }\n    }\n    let ret = [];\n    for(let x = 0; x < rows.length; x++){\n      ret.push(rows[x].join('| '));\n      if((x + 1) % this.size === 0) {\n        let sepChars = '';\n        for(let i = 0; i < this.size * 2; i++){\n          sepChars += '-';\n        }\n        sepChars += '+';\n        let sep = sepChars;\n        for(let i = 1; i < this.size; i++){\n          sep += '-' + sepChars;\n        }\n        ret.push(sep.substr(0, sep.length - 1));\n      }\n    }\n    return ret.join(\"\\n\");\n  }\n}"]}