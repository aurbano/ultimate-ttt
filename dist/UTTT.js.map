{"version":3,"sources":["../src/UTTT.js"],"names":["UTTT","size","maxMoves","Math","pow","_init","stateBoard","isFinished","moves","getResult","boardRowCol","nextBoard","Array","isArray","length","board","move","isValidBoardRowCol","isValidMove","_move","rows","x","y","small","prettyPrint","split","row","xCoord","ret","push","join","sepChars","i","sep","substr","winner","copy","player","gameFinished","parseInt","game","_copy","updatedBoard","addMyMove","addOpponentMove"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAIA;;;;;;IAMqBA,I;AACnB,kBAAqB;AAAA,QAATC,IAAS,uEAAF,CAAE;;AAAA;;AACnB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBC,KAAKC,GAAL,CAAS,KAAKH,IAAd,EAAoB,CAApB,CAAhB;;AAEA,SAAKI,KAAL;;AAEA,WAAO,IAAP;AACD;;AAED;;AAEA;;;;;;;iCAGY;AACV,aAAQ,KAAKC,UAAL,CAAgBC,UAAhB,MAAgC,KAAKC,KAAL,KAAe,KAAKN,QAA5D;AACD;;AAED;;;;;;;gCAIW;AACT,aAAO,KAAKI,UAAL,CAAgBG,SAAhB,EAAP;AACD;;AAED;;;;;;;;uCAKmBC,W,EAAY;AAC7B,UAAG,CAAC,KAAKC,SAAT,EAAmB;AACjB,eAAO,EACL,CAACC,MAAMC,OAAN,CAAcH,WAAd,CAAD,IACAA,YAAYI,MAAZ,KAAuB,CADvB,IAEAJ,YAAY,CAAZ,IAAiB,CAFjB,IAGAA,YAAY,CAAZ,IAAiB,KAAKT,IAHtB,IAIAS,YAAY,CAAZ,IAAiB,CAJjB,IAKAA,YAAY,CAAZ,IAAiB,KAAKT,IALtB,IAMA,OAAO,KAAKc,KAAL,CAAWL,YAAY,CAAZ,CAAX,EAA2BA,YAAY,CAAZ,CAA3B,CAAP,KAAuD,WAPlD,CAAP;AASD,OAVD,MAUK;AACH,eAAOE,MAAMC,OAAN,CAAcH,WAAd,KACL,KAAKC,SAAL,CAAe,CAAf,MAAsBD,YAAY,CAAZ,CADjB,IAEL,KAAKC,SAAL,CAAe,CAAf,MAAsBD,YAAY,CAAZ,CAFxB;AAGD;AACF;;AAED;;;;;;;;;;gCAOYA,W,EAAaM,I,EAAK;AAC5B,UAAG,CAAC,KAAKC,kBAAL,CAAwBP,WAAxB,CAAJ,EAAyC;AACvC,eAAO,KAAP;AACD;AACD,aAAO,KAAKK,KAAL,CAAWL,YAAY,CAAZ,CAAX,EAA2BA,YAAY,CAAZ,CAA3B,EAA2CQ,WAA3C,CAAuDF,IAAvD,CAAP;AACD;;AAED;;;;;;;;;8BAMUN,W,EAAaM,I,EAAK;AAC1B,aAAO,KAAKG,KAAL,CAAWT,WAAX,gBAA4BM,IAA5B,CAAP;AACD;;AAED;;;;;;;;;oCAMgBN,W,EAAaM,I,EAAK;AAChC,aAAO,KAAKG,KAAL,CAAWT,WAAX,sBAAkCM,IAAlC,CAAP;AACD;;AAED;;;;;;;;kCAKa;AACX,UAAII,OAAO,EAAX;AACA,WAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,KAAKpB,IAAxB,EAA8BoB,GAA9B,EAAmC;AACjC,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKrB,IAAzB,EAA+BqB,GAA/B,EAAoC;AAClC,cAAMC,QAAQ,KAAKR,KAAL,CAAWM,CAAX,EAAcC,CAAd,EAAiBE,WAAjB,GAA+BC,KAA/B,CAAqC,IAArC,CAAd;;AAEA,eAAI,IAAIC,MAAM,CAAd,EAAiBA,MAAM,KAAKzB,IAA5B,EAAkCyB,KAAlC,EAAwC;AACtC,gBAAMC,SAASN,IAAI,KAAKpB,IAAT,GAAgByB,GAA/B;AACA,gBAAG,CAACN,KAAKO,MAAL,CAAJ,EAAiB;AACfP,mBAAKO,MAAL,IAAe,EAAf;AACD;AACDP,iBAAKO,MAAL,EAAaL,CAAb,IAAkBC,MAAMG,GAAN,CAAlB;AACD;AACF;AACF;AACD,UAAIE,MAAM,EAAV;AACA,WAAI,IAAIP,MAAI,CAAZ,EAAeA,MAAID,KAAKN,MAAxB,EAAgCO,KAAhC,EAAoC;AAClCO,YAAIC,IAAJ,CAAST,KAAKC,GAAL,EAAQS,IAAR,CAAa,IAAb,CAAT;AACA,YAAG,CAACT,MAAI,CAAL,IAAU,KAAKpB,IAAf,KAAwB,CAA3B,EAA8B;AAC5B,cAAI8B,WAAW,EAAf;AACA,eAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,KAAK/B,IAAL,GAAY,CAA/B,EAAkC+B,GAAlC,EAAsC;AACpCD,wBAAY,GAAZ;AACD;AACDA,sBAAY,GAAZ;AACA,cAAIE,MAAMF,QAAV;AACA,eAAI,IAAIC,KAAI,CAAZ,EAAeA,KAAI,KAAK/B,IAAxB,EAA8B+B,IAA9B,EAAkC;AAChCC,mBAAO,MAAMF,QAAb;AACD;AACDH,cAAIC,IAAJ,CAASI,IAAIC,MAAJ,CAAW,CAAX,EAAcD,IAAInB,MAAJ,GAAa,CAA3B,CAAT;AACD;AACF;AACD,aAAOc,IAAIE,IAAJ,CAAS,IAAT,CAAP;AACD;;AAED;;AAEA;;;;;;;4BAIQ;AACN;AACA,WAAKf,KAAL,GAAa,EAAb;AACA,WAAKP,KAAL,GAAa,CAAb;AACA,WAAK2B,MAAL,GAAc,uBAAa,CAA3B;AACA,WAAKxB,SAAL,GAAiB,IAAjB;;AAEA;AACA,WAAKL,UAAL,GAAkB,uBAAa,KAAKL,IAAlB,CAAlB;;AAEA,WAAI,IAAIoB,IAAI,CAAZ,EAAeA,IAAI,KAAKpB,IAAxB,EAA8BoB,GAA9B,EAAkC;AAChC,aAAKN,KAAL,CAAWM,CAAX,IAAgB,EAAhB;AACA,aAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,KAAKrB,IAAxB,EAA8BqB,GAA9B,EAAkC;AAChC,eAAKP,KAAL,CAAWM,CAAX,EAAcC,CAAd,IAAmB,uBAAa,KAAKrB,IAAlB,CAAnB;AACD;AACF;AACF;;AAED;;;;;;;;4BAKQ;AACN,UAAMmC,OAAO,IAAIpC,IAAJ,CAAS,KAAKC,IAAd,CAAb;AACAmC,WAAK/B,KAAL;AACA+B,WAAKrB,KAAL,GAAa,KAAKA,KAAlB;AACAqB,WAAK5B,KAAL,GAAa,KAAKA,KAAlB;AACA4B,WAAKD,MAAL,GAAc,KAAKA,MAAnB;AACAC,WAAKzB,SAAL,GAAiB,KAAKA,SAAtB;AACAyB,WAAK9B,UAAL,GAAkB,KAAKA,UAAvB;AACA,aAAO8B,IAAP;AACD;;AAED;;;;;;;;;;;0BAQMrB,K,EAAOsB,M,EAAQrB,I,EAAK;AACxB,UAAG,KAAKT,UAAL,EAAH,EAAsB;AACpB,cAAM,qBAAM,iBAAO+B,YAAb,CAAN;AACD;;AAED;AACAvB,YAAM,CAAN,IAAWwB,SAASxB,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAX;AACAA,YAAM,CAAN,IAAWwB,SAASxB,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAX;;AAEAC,WAAK,CAAL,IAAUuB,SAASvB,KAAK,CAAL,CAAT,EAAkB,EAAlB,CAAV;AACAA,WAAK,CAAL,IAAUuB,SAASvB,KAAK,CAAL,CAAT,EAAkB,EAAlB,CAAV;;AAEA,UAAG,CAAC,KAAKC,kBAAL,CAAwBF,KAAxB,CAAJ,EAAmC;AACjC,cAAM,qBAAM,iBAAOA,KAAb,EAAoBA,KAApB,CAAN;AACD;;AAED,UAAG,CAAC,KAAKG,WAAL,CAAiBH,KAAjB,EAAwBC,IAAxB,CAAJ,EAAkC;AAChC,cAAM,qBAAM,iBAAOA,IAAb,EAAmBA,IAAnB,CAAN;AACD;;AAED,UAAMwB,OAAO,KAAKC,KAAL,EAAb;AACA,UAAIC,qBAAJ;;AAEA,UAAIL,uBAAJ,EAAmB;AACjBK,uBAAe,KAAK3B,KAAL,CAAWA,MAAM,CAAN,CAAX,EAAqBA,MAAM,CAAN,CAArB,EAA+B4B,SAA/B,CAAyC3B,IAAzC,EAA+CwB,KAAKhC,KAApD,CAAf;AACD,OAFD,MAEO,IAAI6B,6BAAJ,EAAyB;AAC9BK,uBAAe,KAAK3B,KAAL,CAAWA,MAAM,CAAN,CAAX,EAAqBA,MAAM,CAAN,CAArB,EAA+B6B,eAA/B,CAA+C5B,IAA/C,EAAqDwB,KAAKhC,KAA1D,CAAf;AACD,OAFM,MAEA;AACL,cAAM,qBAAM,iBAAO6B,MAAb,EAAqBA,MAArB,CAAN;AACD;;AAED;AACAG,WAAKzB,KAAL,CAAWA,MAAM,CAAN,CAAX,EAAqBA,MAAM,CAAN,CAArB,IAAiC2B,YAAjC;AACAF,WAAKhC,KAAL;;AAEAgC,WAAK7B,SAAL,GAAiBK,IAAjB;AACA,UAAGwB,KAAKzB,KAAL,CAAWyB,KAAK7B,SAAL,CAAe,CAAf,CAAX,EAA8B6B,KAAK7B,SAAL,CAAe,CAAf,CAA9B,EAAiDJ,UAAjD,EAAH,EAAiE;AAC/DiC,aAAK7B,SAAL,GAAiB,KAAjB;AACD;;AAED;AACA,UACI6B,KAAKzB,KAAL,CAAWA,MAAM,CAAN,CAAX,EAAqBA,MAAM,CAAN,CAArB,EAA+BR,UAA/B,MACAiC,KAAKzB,KAAL,CAAWA,MAAM,CAAN,CAAX,EAAqBA,MAAM,CAAN,CAArB,EAA+BoB,MAA/B,wBAFJ,EAGC;AACCK,aAAKlC,UAAL,GAAkBkC,KAAKlC,UAAL,CAAgBa,KAAhB,CAChBqB,KAAKzB,KAAL,CAAWA,MAAM,CAAN,CAAX,EAAqBA,MAAM,CAAN,CAArB,EAA+BoB,MADf,EAEhBpB,KAFgB,CAAlB;AAID;;AAEDyB,WAAKL,MAAL,GAAcK,KAAKlC,UAAL,CAAgB6B,MAA9B;AACA,aAAOK,IAAP;AACD;;;;;;kBAhOkBxC,I","file":"UTTT.js","sourcesContent":["import SubBoard from './model/SubBoard';\nimport errors from './model/errors';\nimport error from './error';\n\nimport { ME, OPPONENT, RESULT_TIE } from './model/SubBoard';\n\n/**\n * UTTT MainBoard Class\n * Implements a functional/immutable API\n *\n * Docs: https://github.com/socialgorithm/ultimate-ttt-js/wiki\n */\nexport default class UTTT {\n  constructor(size = 3){\n    this.size = size;\n    this.maxMoves = Math.pow(this.size, 4);\n\n    this._init();\n\n    return this;\n  }\n\n  /* --------- Public API --------- */\n\n  /**\n   * Returns true if the game is over\n   */\n  isFinished(){\n    return (this.stateBoard.isFinished() || this.moves === this.maxMoves);\n  }\n\n  /**\n   * Returns the winner for the game, throws an exception if the game hasn't finished yet.\n   * @returns {number} -1 for a tie, 0 you won, 1 opponent won\n   */\n  getResult(){\n    return this.stateBoard.getResult();\n  }\n\n  /**\n   * Validates a board selection before playing it\n   * @param boardRowCol Board coordinates as an array [row, col]\n   * @returns {boolean} true if the board is playable\n   */\n  isValidBoardRowCol(boardRowCol){\n    if(!this.nextBoard){\n      return !(\n        !Array.isArray(boardRowCol) ||\n        boardRowCol.length !== 2 ||\n        boardRowCol[0] < 0 ||\n        boardRowCol[0] > this.size ||\n        boardRowCol[1] < 0 ||\n        boardRowCol[1] > this.size ||\n        typeof(this.board[boardRowCol[0]][boardRowCol[1]]) === 'undefined'\n      );\n    }else{\n      return Array.isArray(boardRowCol) &&\n        this.nextBoard[0] === boardRowCol[0] &&\n        this.nextBoard[1] === boardRowCol[1];\n    }\n  }\n\n  /**\n   * Validates a given board & move combination (check for right format, data ranges, and\n   * that the move hasn't already been played)\n   * @param boardRowCol Board coordinates [row, col]\n   * @param move Move coordinates [row, col]\n   * @returns {boolean} true if the move is valid\n   */\n  isValidMove(boardRowCol, move){\n    if(!this.isValidBoardRowCol(boardRowCol)){\n      return false;\n    }\n    return this.board[boardRowCol[0]][boardRowCol[1]].isValidMove(move);\n  }\n\n  /**\n   * Adds your move to the board, throws exception if move is invalid or board is already finished.\n   * @param boardRowCol\n   * @param move\n   * @returns {UTTT}\n   */\n  addMyMove(boardRowCol, move){\n    return this._move(boardRowCol, ME, move);\n  }\n\n  /**\n   * Adds an opponent move to the board, throws exception if move is invalid or board is already finished.\n   * @param boardRowCol\n   * @param move\n   * @returns {UTTT}\n   */\n  addOpponentMove(boardRowCol, move){\n    return this._move(boardRowCol, OPPONENT, move);\n  }\n\n  /**\n   * Returns a string with the board formatted for display\n   * including new lines.\n   * @returns {string}\n   */\n  prettyPrint(){\n    let rows = [];\n    for(let x = 0; x < this.size; x++) {\n      for (let y = 0; y < this.size; y++) {\n        const small = this.board[x][y].prettyPrint().split(\"\\n\");\n\n        for(let row = 0; row < this.size; row++){\n          const xCoord = x * this.size + row;\n          if(!rows[xCoord]){\n            rows[xCoord] = [];\n          }\n          rows[xCoord][y] = small[row];\n        }\n      }\n    }\n    let ret = [];\n    for(let x = 0; x < rows.length; x++){\n      ret.push(rows[x].join('| '));\n      if((x + 1) % this.size === 0) {\n        let sepChars = '';\n        for(let i = 0; i < this.size * 2; i++){\n          sepChars += '-';\n        }\n        sepChars += '+';\n        let sep = sepChars;\n        for(let i = 1; i < this.size; i++){\n          sep += '-' + sepChars;\n        }\n        ret.push(sep.substr(0, sep.length - 1));\n      }\n    }\n    return ret.join(\"\\n\");\n  }\n\n  /* --------- Private API --------- */\n\n  /**\n   * Initialize the game\n   * @private\n   */\n  _init() {\n    // Game state\n    this.board = [];\n    this.moves = 0;\n    this.winner = RESULT_TIE - 1;\n    this.nextBoard = null;\n\n    // The state board holds the ultimate game state\n    this.stateBoard = new SubBoard(this.size);\n\n    for(let x = 0; x < this.size; x++){\n      this.board[x] = [];\n      for(let y = 0; y < this.size; y++){\n        this.board[x][y] = new SubBoard(this.size);\n      }\n    }\n  }\n\n  /**\n   * Return a new UTTT board as a copy of this one\n   * @returns {UTTT} Copy of the current game\n   * @private\n   */\n  _copy() {\n    const copy = new UTTT(this.size);\n    copy._init();\n    copy.board = this.board;\n    copy.moves = this.moves;\n    copy.winner = this.winner;\n    copy.nextBoard = this.nextBoard;\n    copy.stateBoard = this.stateBoard;\n    return copy;\n  }\n\n  /**\n   * Execute a move\n   * @param player Player identifier (1 || 2)\n   * @param board Board coordinates as an array [x, y]\n   * @param move Move coordinates as an array [x, y]\n   * @returns {UTTT} Updated copy of the current game with the move added and the state updated\n   * @private\n   */\n  _move(board, player, move){\n    if(this.isFinished()) {\n      throw error(errors.gameFinished);\n    }\n\n    // Make sure we're dealing with ints\n    board[0] = parseInt(board[0], 10);\n    board[1] = parseInt(board[1], 10);\n\n    move[0] = parseInt(move[0], 10);\n    move[1] = parseInt(move[1], 10);\n\n    if(!this.isValidBoardRowCol(board)){\n      throw error(errors.board, board);\n    }\n\n    if(!this.isValidMove(board, move)){\n      throw error(errors.move, move);\n    }\n\n    const game = this._copy();\n    let updatedBoard;\n\n    if (player === ME) {\n      updatedBoard = this.board[board[0]][board[1]].addMyMove(move, game.moves);\n    } else if (player === OPPONENT) {\n      updatedBoard = this.board[board[0]][board[1]].addOpponentMove(move, game.moves);\n    } else {\n      throw error(errors.player, player);\n    }\n\n    // update the copy\n    game.board[board[0]][board[1]] = updatedBoard;\n    game.moves++;\n\n    game.nextBoard = move;\n    if(game.board[game.nextBoard[0]][game.nextBoard[1]].isFinished()){\n      game.nextBoard = false;\n    }\n\n    // Update the game board state\n    if(\n        game.board[board[0]][board[1]].isFinished() &&\n        game.board[board[0]][board[1]].winner >= RESULT_TIE\n    ){\n      game.stateBoard = game.stateBoard._move(\n        game.board[board[0]][board[1]].winner,\n        board\n      );\n    }\n\n    game.winner = game.stateBoard.winner;\n    return game;\n  }\n}"]}