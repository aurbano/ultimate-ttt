{"version":3,"sources":["../../src/tests/SubBoard.test.js"],"names":["validateBoard","board","t","true","Array","isArray","forEach","row","cell","player","index","subBoard","is","isFinished","getResult","isValidMove","addMyMove","addOpponentMove","prettyPrint","throws","gameNotFinished","message","emptyCell","myCell","opponentCell","deepEqual","_move","move","notThrows","boardFinished"],"mappings":";;;;AAAA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,CAA9B,EAAgC;AAC9BA,IAAEC,IAAF,CAAOC,MAAMC,OAAN,CAAcJ,KAAd,CAAP;;AAEAA,QAAMK,OAAN,CAAc,UAACC,GAAD,EAAS;AACrBL,MAAEC,IAAF,CAAOC,MAAMC,OAAN,CAAcE,GAAd,CAAP;AACAA,QAAID,OAAJ,CAAY,UAACE,IAAD,EAAU;AACpBN,QAAEC,IAAF,CAAOK,KAAKC,MAAL,IAAe,CAAC,CAAvB;AACAP,QAAEC,IAAF,CAAOK,KAAKC,MAAL,IAAe,CAAtB;AACAP,QAAEC,IAAF,CAAOK,KAAKE,KAAL,IAAc,CAAC,CAAtB;AACD,KAJD;AAKD,GAPD;AAQD;;AAED,mBAAK,gCAAL,EAAuC,aAAK;AAC1C,MAAMC,WAAW,wBAAjB;;AAEAT,IAAEU,EAAF,QAAYD,QAAZ,yCAAYA,QAAZ,GAAuB,QAAvB;AACAT,IAAEU,EAAF,SAAYD,SAASE,UAArB,GAAkC,UAAlC;AACAX,IAAEU,EAAF,SAAYD,SAASG,SAArB,GAAiC,UAAjC;AACAZ,IAAEU,EAAF,SAAYD,SAASI,WAArB,GAAmC,UAAnC;AACAb,IAAEU,EAAF,SAAYD,SAASK,SAArB,GAAiC,UAAjC;AACAd,IAAEU,EAAF,SAAYD,SAASM,eAArB,GAAuC,UAAvC;AACAf,IAAEU,EAAF,SAAYD,SAASO,WAArB,GAAmC,UAAnC;;AAEAlB,gBAAcW,SAASV,KAAvB,EAA8BC,CAA9B;AACD,CAZD;;AAcA,mBAAK,+BAAL,EAAsC,aAAK;AACzC,MAAMS,WAAW,wBAAjB;;AAEAT,IAAEiB,MAAF,CAAS,YAAM;AACbR,aAASG,SAAT;AACD,GAFD,EAEG,qBAAM,iBAAOM,eAAb,EAA8BC,OAFjC;AAGD,CAND;;AAQA,mBAAK,kCAAL,EAAyC,aAAK;AAC5C,MAAIV,WAAW,wBAAf;AACAA,aAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AACAL,aAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;;AAEA,MAAMK,YAAY,oBAAlB;AACA,MAAMC,SAAS,iCAAa,CAAb,CAAf;AACA,MAAMC,eAAe,uCAAmB,CAAnB,CAArB;;AAEAtB,IAAEuB,SAAF,CAAYd,SAASV,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAZ,EAAkCsB,MAAlC;AACArB,IAAEuB,SAAF,CAAYd,SAASV,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAZ,EAAkCqB,SAAlC;AACApB,IAAEuB,SAAF,CAAYd,SAASV,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAZ,EAAkCqB,SAAlC;AACApB,IAAEuB,SAAF,CAAYd,SAASV,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAZ,EAAkCqB,SAAlC;AACApB,IAAEuB,SAAF,CAAYd,SAASV,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAZ,EAAkCqB,SAAlC;AACApB,IAAEuB,SAAF,CAAYd,SAASV,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAZ,EAAkCqB,SAAlC;AACApB,IAAEuB,SAAF,CAAYd,SAASV,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAZ,EAAkCqB,SAAlC;AACApB,IAAEuB,SAAF,CAAYd,SAASV,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAZ,EAAkCuB,YAAlC;AACAtB,IAAEuB,SAAF,CAAYd,SAASV,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAZ,EAAkCqB,SAAlC;AACD,CAlBD;;AAoBA,mBAAK,6BAAL,EAAoC,aAAK;AACvC,MAAMX,WAAW,wBAAjB;;AAEAT,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAC,CAAhB,EAAmB,CAAnB;AAAsB,GAAtC,EAAwC,qBAAM,iBAAOjB,MAAb,EAAqB,IAArB,EAA2BY,OAAnE;AACAnB,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,KAAf,EAAsB,CAAtB;AAAyB,GAAzC,EAA2C,qBAAM,iBAAOjB,MAAb,EAAqB,KAArB,EAA4BY,OAAvE;AACAnB,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAf,EAAkB,CAAlB;AAAqB,GAArC,EAAuC,qBAAM,iBAAOjB,MAAb,EAAqB,GAArB,EAA0BY,OAAjE;AACD,CAND;;AAQA,mBAAK,4BAAL,EAAmC,aAAK;AACtC,MAAMV,WAAW,wBAAjB;;AAEAT,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAf;AAAkB,GAAlC,EAAoC,qBAAM,iBAAOC,IAAb,EAAmBN,OAAvD;AACAnB,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAf,EAAkB,CAAlB;AAAqB,GAArC,EAAuC,qBAAM,iBAAOC,IAAb,EAAmB,CAAnB,EAAsBN,OAA7D;AACAnB,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAf,EAAkB,KAAlB;AAAyB,GAAzC,EAA2C,qBAAM,iBAAOC,IAAb,EAAmB,KAAnB,EAA0BN,OAArE;AACAnB,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAf,EAAkB,EAAlB;AAAsB,GAAtC,EAAwC,qBAAM,iBAAOC,IAAb,EAAmB,EAAnB,EAAuBN,OAA/D;AACAnB,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAD,CAAlB;AAAuB,GAAvC,EAAyC,qBAAM,iBAAOC,IAAb,EAAmB,CAAC,CAAD,CAAnB,EAAwBN,OAAjE;AACAnB,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlB;AAA0B,GAA1C,EAA4C,qBAAM,iBAAOC,IAAb,EAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,EAA2BN,OAAvE;AACAnB,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAlB;AAA2B,GAA3C,EAA6C,qBAAM,iBAAOC,IAAb,EAAmB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAnB,EAA4BN,OAAzE;AACAnB,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASe,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB;AAA6B,GAA7C,EAA+C,qBAAM,iBAAOC,IAAb,EAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB,EAA8BN,OAA7E;AACD,CAXD;;AAaA,mBAAK,6BAAL,EAAoC,aAAK;AACvC,MAAMV,WAAW,wBAAjB;;AAEAT,IAAE0B,SAAF,CAAY,YAAM;AAACjB,aAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB;AAA2B,GAA9C;AACAd,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB;AAAiC,GAAjD,EAAmD,qBAAM,iBAAOU,IAAb,EAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,EAA2BN,OAA9E;AACD,CALD;;AAOA,mBAAK,wCAAL,EAA+C,aAAK;AAClD,MAAIV,WAAW,wBAAf;;AAEAT,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;;AAEAd,IAAEC,IAAF,CAAOQ,SAASE,UAAT,EAAP;;AAEAX,IAAEiB,MAAF,CAAS,YAAM;AAACR,aAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB;AAAiC,GAAjD,EAAmD,qBAAM,iBAAOY,aAAb,EAA4BR,OAA/E;AACD,CAhBD;;AAkBA,mBAAK,0BAAL,EAAiC,aAAK;AACpC,MAAMV,WAAW,wBAAjB;;AAEAT,IAAE0B,SAAF,CAAY,YAAM;AAChBjB,aAASO,WAAT;AACAhB,MAAEU,EAAF,SAAYD,SAASO,WAAT,EAAZ,GAAoC,QAApC;AACD,GAHD;AAID,CAPD;;AASA,mBAAK,oBAAL,EAA2B,aAAK;AAC9B,MAAIP,WAAW,wBAAf;;AAEAT,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;;AAEAd,IAAEC,IAAF,CAAOQ,SAASE,UAAT,EAAP;AACAX,IAAEU,EAAF,CAAKD,SAASG,SAAT,EAAL;AACD,CAXD;;AAaA,mBAAK,uBAAL,EAA8B,aAAK;AACjC,MAAIH,WAAW,wBAAf;;AAEAT,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;;AAEAd,IAAEC,IAAF,CAAOQ,SAASE,UAAT,EAAP;AACAX,IAAEU,EAAF,CAAKD,SAASG,SAAT,EAAL;AACD,CAXD;;AAaA,mBAAK,6BAAL,EAAoC,aAAK;AACvC,MAAIH,WAAW,wBAAf;;AAEAT,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;;AAEAd,IAAEC,IAAF,CAAOQ,SAASE,UAAT,EAAP;AACAX,IAAEU,EAAF,CAAKD,SAASG,SAAT,EAAL;AACD,CAXD;;AAaA,mBAAK,6BAAL,EAAoC,aAAK;AACvC,MAAIH,WAAW,wBAAf;;AAEAT,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;AACAd,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASM,eAAT,CAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAX;AAA4C,GAA/D;AACAf,IAAE0B,SAAF,CAAY,YAAM;AAACjB,eAAWA,SAASK,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAX;AAAsC,GAAzD;;AAEAd,IAAEC,IAAF,CAAOQ,SAASE,UAAT,EAAP;AACAX,IAAEU,EAAF,CAAKD,SAASG,SAAT,EAAL;AACD,CAXD","file":"SubBoard.test.js","sourcesContent":["import test from 'ava';\n\nimport SubBoard from '../model/SubBoard';\nimport Cell from '../model/Cell';\nimport { ME, OPPONENT } from '../model/SubBoard';\nimport errors from '../model/errors';\nimport error from '../error';\n\nfunction validateBoard(board, t){\n  t.true(Array.isArray(board));\n\n  board.forEach((row) => {\n    t.true(Array.isArray(row));\n    row.forEach((cell) => {\n      t.true(cell.player >= -1);\n      t.true(cell.player <= 2);\n      t.true(cell.index >= -1);\n    });\n  });\n}\n\ntest('Returns a valid SubBoard model', t => {\n  const subBoard = new SubBoard();\n\n  t.is(typeof(subBoard), 'object');\n  t.is(typeof(subBoard.isFinished), 'function');\n  t.is(typeof(subBoard.getResult), 'function');\n  t.is(typeof(subBoard.isValidMove), 'function');\n  t.is(typeof(subBoard.addMyMove), 'function');\n  t.is(typeof(subBoard.addOpponentMove), 'function');\n  t.is(typeof(subBoard.prettyPrint), 'function');\n\n  validateBoard(subBoard.board, t);\n});\n\ntest('getResult fails if unfinished', t => {\n  const subBoard = new SubBoard();\n\n  t.throws(() => {\n    subBoard.getResult()\n  }, error(errors.gameNotFinished).message);\n});\n\ntest('Move correctly updates the board', t => {\n  let subBoard = new SubBoard();\n  subBoard = subBoard.addMyMove([0, 0]);\n  subBoard = subBoard.addOpponentMove([2, 1]);\n\n  const emptyCell = new Cell();\n  const myCell = new Cell(ME, 0);\n  const opponentCell = new Cell(OPPONENT, 1);\n\n  t.deepEqual(subBoard.board[0][0], myCell);\n  t.deepEqual(subBoard.board[0][1], emptyCell);\n  t.deepEqual(subBoard.board[0][2], emptyCell);\n  t.deepEqual(subBoard.board[1][0], emptyCell);\n  t.deepEqual(subBoard.board[1][1], emptyCell);\n  t.deepEqual(subBoard.board[1][2], emptyCell);\n  t.deepEqual(subBoard.board[2][0], emptyCell);\n  t.deepEqual(subBoard.board[2][1], opponentCell);\n  t.deepEqual(subBoard.board[2][2], emptyCell);\n});\n\ntest('Move rejects invalid player', t => {\n  const subBoard = new SubBoard();\n\n  t.throws(() => {subBoard._move(-1, 1)}, error(errors.player, '-1').message);\n  t.throws(() => {subBoard._move('abc', 1)}, error(errors.player, 'abc').message);\n  t.throws(() => {subBoard._move(3, 1)}, error(errors.player, '3').message);\n});\n\ntest('Move rejects invalid moves', t => {\n  const subBoard = new SubBoard();\n\n  t.throws(() => {subBoard._move(1)}, error(errors.move).message);\n  t.throws(() => {subBoard._move(1, 1)}, error(errors.move, 1).message);\n  t.throws(() => {subBoard._move(1, 'abc')}, error(errors.move, 'abc').message);\n  t.throws(() => {subBoard._move(1, [])}, error(errors.move, []).message);\n  t.throws(() => {subBoard._move(1, [1])}, error(errors.move, [1]).message);\n  t.throws(() => {subBoard._move(1, [1, 4])}, error(errors.move, [1, 4]).message);\n  t.throws(() => {subBoard._move(1, [-1, 4])}, error(errors.move, [-1, 4]).message);\n  t.throws(() => {subBoard._move(1, [1, 1, 1])}, error(errors.move, [1, 1, 1]).message);\n});\n\ntest('Move rejects repeated moves', t => {\n  const subBoard = new SubBoard();\n\n  t.notThrows(() => {subBoard.addMyMove([1, 1])});\n  t.throws(() => {subBoard.addOpponentMove([1, 1])}, error(errors.move, [1, 1]).message);\n});\n\ntest('Move rejects moves after board is full', t => {\n  let subBoard = new SubBoard();\n\n  t.notThrows(() => {subBoard = subBoard.addMyMove([0, 0])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([0, 1])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([0, 2])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([1, 0])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([2, 0])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([1, 1])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([1, 2])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([2, 2])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([2, 1])});\n\n  t.true(subBoard.isFinished());\n\n  t.throws(() => {subBoard.addOpponentMove([1, 1])}, error(errors.boardFinished).message);\n});\n\ntest('Can pretty print a board', t => {\n  const subBoard = new SubBoard();\n\n  t.notThrows(() => {\n    subBoard.prettyPrint();\n    t.is(typeof subBoard.prettyPrint(), 'string');\n  });\n});\n\ntest('Detect winning row', t => {\n  let subBoard = new SubBoard();\n\n  t.notThrows(() => {subBoard = subBoard.addMyMove([0, 0])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([1, 1])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([0, 2])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([1, 0])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([0, 1])});\n\n  t.true(subBoard.isFinished());\n  t.is(subBoard.getResult(), ME);\n});\n\ntest('Detect winning column', t => {\n  let subBoard = new SubBoard();\n\n  t.notThrows(() => {subBoard = subBoard.addMyMove([0, 0])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([1, 1])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([2, 0])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([0, 1])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([1, 0])});\n\n  t.true(subBoard.isFinished());\n  t.is(subBoard.getResult(), ME);\n});\n\ntest('Detect winning RtL diagonal', t => {\n  let subBoard = new SubBoard();\n\n  t.notThrows(() => {subBoard = subBoard.addMyMove([0, 0])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([2, 1])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([1, 1])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([2, 0])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([2, 2])});\n\n  t.true(subBoard.isFinished());\n  t.is(subBoard.getResult(), ME);\n});\n\ntest('Detect winning LtR diagonal', t => {\n  let subBoard = new SubBoard();\n\n  t.notThrows(() => {subBoard = subBoard.addMyMove([2, 0])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([2, 1])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([1, 1])});\n  t.notThrows(() => {subBoard = subBoard.addOpponentMove([1, 0])});\n  t.notThrows(() => {subBoard = subBoard.addMyMove([0, 2])});\n\n  t.true(subBoard.isFinished());\n  t.is(subBoard.getResult(), ME);\n});"]}