{"version":3,"sources":["../../src/model/TicTacToe.js"],"names":["TicTacToe","size","init","maxMoves","Math","pow","board","moves","winner","x","y","player","move","isFinished","Error","boardFinished","isValidPlayer","isValidMove","repeat","checkRow","checkColumn","checkLtRDiagonal","checkRtLDiagonal","Number","isInteger","Array","isArray","length","row","i","col","ret","line","push","join"],"mappings":"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","file":"TicTacToe.js","sourcesContent":["import errors from '../errors';\n\n/**\n * TicTacToe board implementation\n * Players must be indicated with 1 or 2\n * Moves with an array of [x, y]\n */\nexport default class TicTacToe {\n  constructor(size = 3){\n    this.size = size;\n    this.init();\n\n    this.maxMoves = Math.pow(this.size, 2);\n\n    return this;\n  }\n\n  init(){\n    this.board = [];\n    this.moves = 0;\n    this.winner = -1;\n\n    for(let x = 0; x < this.size; x++){\n      this.board[x] = [];\n      for(let y = 0; y < this.size; y++){\n        this.board[x][y] = 0;\n      }\n    }\n  }\n\n  /**\n   * Returns true if the game is over\n   */\n  isFinished(){\n    return (this.winner > -1 || this.moves === this.maxMoves);\n  }\n\n  /**\n   * Execute a move\n   * @param player Player identifier (1 || 2)\n   * @param move Move coordinates as an array [x, y]\n   */\n  move(player, move){\n    if(this.isFinished()) {\n      throw new Error(errors.boardFinished, 1);\n    }\n\n    if (!this.isValidPlayer(player)) {\n      throw new Error(errors.player, 2);\n    }\n\n    if (!this.isValidMove(move)) {\n      throw new Error(errors.move, 3);\n    }\n\n    if (this.board[move[0]][move[1]] > 0) {\n      throw new Error(errors.repeat, 4);\n    }\n\n    this.board[move[0]][move[1]] = player;\n    this.moves++;\n\n    this.checkRow(move[0]);\n    this.checkColumn(move[1]);\n\n    this.checkLtRDiagonal();\n    this.checkRtLDiagonal();\n\n    if (this.isFinished() && this.winner < 0){\n      this.winner = 0;\n    }\n  }\n\n  /**\n   * Validates a player\n   * @param player Player identifier (1 || 2)\n   * @returns {boolean}\n   */\n  isValidPlayer(player){\n    return !(!player || !Number.isInteger(player) || player < 1 || player > 2);\n  }\n\n  /**\n   * Validates a move\n   * @param move Move coordinates as an array [x, y]\n   * @returns {boolean}\n   */\n  isValidMove(move){\n    return !(\n      !Array.isArray(move) ||\n      move.length !== 2 ||\n      move[0] < 0 ||\n      move[0] > this.size ||\n      move[1] < 0 ||\n      move[1] > this.size ||\n      typeof(this.board[move[0]][move[1]]) === 'undefined'\n    );\n  }\n\n  checkRow(row){\n    const player = this.board[row][0];\n    if(player === 0){\n      return;\n    }\n    for(let i = 1; i < this.size; i++){\n      if(player !== this.board[row][i]) {\n        return;\n      }\n    }\n    this.winner = player;\n  }\n\n  checkColumn(col){\n    const player = this.board[0][col];\n    if(player === 0){\n      return;\n    }\n    for(let i = 1; i < this.size; i++){\n      if(player !== this.board[i][col]) {\n        return;\n      }\n    }\n    this.winner = player;\n  }\n\n  checkLtRDiagonal(){\n    const player = this.board[0][0];\n    if(player === 0){\n      return;\n    }\n    for(let i = 1; i < this.size; i++){\n      if(player !== this.board[i][i]){\n        return;\n      }\n    }\n    this.winner = player;\n  }\n\n  checkRtLDiagonal(){\n    const player = this.board[0][this.size - 1];\n    if(player === 0){\n      return;\n    }\n    for(let i = this.size - 1; i >= 0; i--){\n      if(player !== this.board[this.size - 1 - i][i]){\n        return;\n      }\n    }\n    this.winner = player;\n  }\n\n  prettyPrint(){\n    let ret = [];\n    for(let x = 0; x < this.size; x++) {\n      let line = '';\n      for (let y = 0; y < this.size; y++) {\n        line += this.board[x][y] + ' ';\n      }\n      ret.push(line);\n    }\n    return ret.join(\"\\n\");\n  }\n}"]}